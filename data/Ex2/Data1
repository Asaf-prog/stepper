Serial Number,File Name Before Change,File Name After Change
1,1,1
2,12,12
3,1b,1b
4,1b.zip,1b.zip
5,21212,21212
6,21212.zip,21212.zip
7,StepperData,StepperData




        OkHttpClient client = new OkHttpClient();

        String BASE_URL = "http://localhost:8080";
        Request request = new Request.Builder()
                .url(BASE_URL + "/hello-world")
                .build();

        Call call = client.newCall(request);

        try {
            // blocking
            final Response response = call.execute();

            System.out.println("Code: " + response.code());

            Headers headers = response.headers();
            System.out.println("Total Headers: " + headers.size());
            System.out.println("Headers Names: " + headers.names());
            headers.names().forEach(headerName ->
                    System.out.println("Header [" + headerName + "] = [" + headers.get(headerName) + "]"));

            System.out.println("Body: " + response.body().string());
        } catch (IOException e) {
            System.out.println("Ooops... error occured: " + e.getMessage());
        }

    public StepResult invoke(StepExecutionContext context) throws NoStepInput {
        String resource = context.getDataValue("RESOURCE", String.class);
        String address = context.getDataValue("ADDRESS", String.class);
        ProtocolEnum protocol = context.getDataValue("PROTOCOL", ProtocolEnum.class);
        Optional<MethodEnum> maybeMethod = Optional.ofNullable(context.getDataValue("METHOD", MethodEnum.class));
        Optional<JsonData> maybeBody = Optional.ofNullable(context.getDataValue("BODY", JsonData.class));

        StepLogs logs = new StepLogs(context.getCurrentWorkingStep().getFinalStepName());
        StepResult res;

        String url = buildUrl(protocol, address, resource);
        Request.Builder requestBuilder = new Request.Builder().url(url);

        MethodEnum method = maybeMethod.orElse(MethodEnum.GET);
        JsonData body = maybeBody.orElse(new JsonData("{}"));//Empty body

        switch (method) {
            case GET:
                requestBuilder.get();
                break;
            case POST:
                requestBuilder.post(RequestBody.create(MediaType.parse("application/json"), body.toString()));
                break;
            case PUT:
                requestBuilder.put(RequestBody.create(MediaType.parse("application/json"), body.toString()));
                break;
            case DELETE:
                requestBuilder.delete(RequestBody.create(MediaType.parse("application/json"), body.toString()));
                break;
            default:
                context.addStepSummaryLine("Step failed cause invalid method");
                res = StepResult.FAILURE;
        }
        OkHttpClient client = new OkHttpClient();
        Call call = client.newCall(requestBuilder.build());
        try {
            logs.addLogLine("About to invoke http request: " + protocol + " | " + method + " | " + address + " | " + resource);
            Response response = call.execute();

            logs.addLogLine("Received Response. Status code: " + response.code());
            context.addStepSummaryLine("Received Response. Status code: " + response.code());

            context.storeDataValue("CODE", response.code());

            String responseBody = response.body() != null ? response.body().string() : "";
            context.storeDataValue("RESPONSE_BODY", responseBody);

            res = StepResult.SUCCESS;


        } catch (IOException e) {
            context.addStepSummaryLine("Step failed cause error occurred during the http call");
            res = StepResult.FAILURE;
        }


        context.addStepLog(logs);
        return res;

    }













